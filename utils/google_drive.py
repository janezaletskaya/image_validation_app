import streamlit as st
import requests
import re
from urllib.parse import urlparse, parse_qs
import json


def extract_folder_id_from_url(url):
    """–ò–∑–≤–ª–µ–∫–∞–µ—Ç ID –ø–∞–ø–∫–∏ –∏–∑ URL Google Drive"""
    if not url:
        return None

    patterns = [
        r'/folders/([a-zA-Z0-9-_]+)',
        r'id=([a-zA-Z0-9-_]+)',
        r'/drive/folders/([a-zA-Z0-9-_]+)'
    ]

    for pattern in patterns:
        match = re.search(pattern, url)
        if match:
            return match.group(1)

    return None


def get_files_from_public_folder(folder_url):
    """
    –ü–æ–ª—É—á–∞–µ—Ç —Å–ø–∏—Å–æ–∫ —Ñ–∞–π–ª–æ–≤ –∏–∑ –ø—É–±–ª–∏—á–Ω–æ–π –ø–∞–ø–∫–∏ Google Drive
    –ò—Å–ø–æ–ª—å–∑—É–µ—Ç –≤–µ–±-—Å–∫—Ä–µ–π–ø–∏–Ω–≥, —Ç–∞–∫ –∫–∞–∫ –ø–∞–ø–∫–∞ –ø—É–±–ª–∏—á–Ω–∞—è
    """

    folder_id = extract_folder_id_from_url(folder_url)
    if not folder_id:
        raise Exception("–ù–µ —É–¥–∞–ª–æ—Å—å –∏–∑–≤–ª–µ—á—å ID –ø–∞–ø–∫–∏ –∏–∑ URL")

    try:
        # –§–æ—Ä–º–∏—Ä—É–µ–º URL –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Å–ø–∏—Å–∫–∞ —Ñ–∞–π–ª–æ–≤
        api_url = f"https://drive.google.com/drive/folders/{folder_id}"

        headers = {
            'User-Agent': 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/91.0.4472.124 Safari/537.36'
        }

        # –î–µ–ª–∞–µ–º –∑–∞–ø—Ä–æ—Å
        response = requests.get(api_url, headers=headers, timeout=15)

        if response.status_code != 200:
            raise Exception(f"–û—à–∏–±–∫–∞ –¥–æ—Å—Ç—É–ø–∞ –∫ –ø–∞–ø–∫–µ: HTTP {response.status_code}")

        # –ü–∞—Ä—Å–∏–º HTML –¥–ª—è –∏–∑–≤–ª–µ—á–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ —Ñ–∞–π–ª–∞—Ö
        html_content = response.text

        # –ò—â–µ–º JSON –¥–∞–Ω–Ω—ã–µ –≤ HTML
        files_data = extract_files_from_html(html_content)

        if not files_data:
            # –ê–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã–π –º–µ—Ç–æ–¥ - —á–µ—Ä–µ–∑ embeddedfolderview
            return get_files_alternative_method(folder_id)

        return files_data

    except requests.RequestException as e:
        raise Exception(f"–û—à–∏–±–∫–∞ —Å–µ—Ç–∏: {str(e)}")
    except Exception as e:
        raise Exception(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Ñ–∞–π–ª–æ–≤: {str(e)}")


def extract_files_from_html(html_content):
    """–ò–∑–≤–ª–µ–∫–∞–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ñ–∞–π–ª–∞—Ö –∏–∑ HTML —Å—Ç—Ä–∞–Ω–∏—Ü—ã Google Drive"""

    files = []

    # –ü–∞—Ç—Ç–µ—Ä–Ω—ã –¥–ª—è –ø–æ–∏—Å–∫–∞ —Ñ–∞–π–ª–æ–≤ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π
    image_patterns = [
        r'"([^"]*\.(?:jpg|jpeg|png|gif|bmp|webp))"[^"]*"([^"]*)"',
        r"'([^']*\.(?:jpg|jpeg|png|gif|bmp|webp))'[^']*'([^']*)'",
        # –ü–æ–∏—Å–∫ ID —Ñ–∞–π–ª–æ–≤ –∏ –∏–º–µ–Ω
        r'"id":"([^"]{20,})"[^}]*"name":"([^"]*\.(?:jpg|jpeg|png|gif|bmp|webp))"',
    ]

    for pattern in image_patterns:
        matches = re.findall(pattern, html_content, re.IGNORECASE)
        for match in matches:
            if len(match) == 2:
                # –û–ø—Ä–µ–¥–µ–ª—è–µ–º, —á—Ç–æ —è–≤–ª—è–µ—Ç—Å—è –∏–º–µ–Ω–µ–º —Ñ–∞–π–ª–∞, –∞ —á—Ç–æ ID
                if '.' in match[0] and len(match[1]) > 20:  # match[0] - –∏–º—è, match[1] - ID
                    filename = match[0]
                    file_id = match[1]
                elif '.' in match[1] and len(match[0]) > 20:  # match[1] - –∏–º—è, match[0] - ID
                    filename = match[1]
                    file_id = match[0]
                else:
                    continue

                if is_image_file(filename):
                    files.append({
                        'filename': filename,
                        'file_id': file_id,
                        'view_url': f"https://drive.google.com/file/d/{file_id}/preview"
                    })

    # –£–±–∏—Ä–∞–µ–º –¥—É–±–ª–∏–∫–∞—Ç—ã –ø–æ –∏–º–µ–Ω–∏ —Ñ–∞–π–ª–∞
    seen_names = set()
    unique_files = []
    for file_info in files:
        if file_info['filename'] not in seen_names:
            seen_names.add(file_info['filename'])
            unique_files.append(file_info)

    return unique_files


def get_files_alternative_method(folder_id):
    """–ê–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã–π –º–µ—Ç–æ–¥ –ø–æ–ª—É—á–µ–Ω–∏—è —Ñ–∞–π–ª–æ–≤ —á–µ—Ä–µ–∑ embeddedfolderview"""

    try:
        embed_url = f"https://drive.google.com/embeddedfolderview?id={folder_id}#list"

        headers = {
            'User-Agent': 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36'
        }

        response = requests.get(embed_url, headers=headers, timeout=10)

        if response.status_code == 200:
            html = response.text

            # –ü—Ä–æ—Å—Ç–æ–π –ø–æ–∏—Å–∫ –∏–º–µ–Ω —Ñ–∞–π–ª–æ–≤ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π
            image_extensions = ['jpg', 'jpeg', 'png', 'gif', 'bmp', 'webp']
            files = []

            for ext in image_extensions:
                pattern = rf'["\']([^"\']*\.{ext})["\']'
                matches = re.findall(pattern, html, re.IGNORECASE)

                for filename in matches:
                    if is_image_file(filename) and len(filename) > 3:
                        files.append({
                            'filename': filename,
                            'file_id': None,  # –ù–µ –º–æ–∂–µ–º –ø–æ–ª—É—á–∏—Ç—å ID —ç—Ç–∏–º –º–µ—Ç–æ–¥–æ–º
                            'view_url': None
                        })

            # –£–±–∏—Ä–∞–µ–º –¥—É–±–ª–∏–∫–∞—Ç—ã
            seen = set()
            unique_files = []
            for file_info in files:
                if file_info['filename'] not in seen:
                    seen.add(file_info['filename'])
                    unique_files.append(file_info)

            return unique_files

    except Exception as e:
        st.error(f"–ê–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã–π –º–µ—Ç–æ–¥ –Ω–µ —Å—Ä–∞–±–æ—Ç–∞–ª: {str(e)}")

    return []


def is_image_file(filename):
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ —Ñ–∞–π–ª –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ–º"""
    if not filename:
        return False

    image_extensions = {'.jpg', '.jpeg', '.png', '.gif', '.bmp', '.webp', '.tiff', '.tif'}
    return any(filename.lower().endswith(ext) for ext in image_extensions)


def test_folder_access(folder_url):
    """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç –¥–æ—Å—Ç—É–ø –∫ –ø–∞–ø–∫–µ Google Drive"""

    folder_id = extract_folder_id_from_url(folder_url)
    if not folder_id:
        return False, "–ù–µ–≤–µ—Ä–Ω—ã–π URL –ø–∞–ø–∫–∏"

    try:
        test_url = f"https://drive.google.com/drive/folders/{folder_id}"
        headers = {
            'User-Agent': 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36'
        }

        response = requests.get(test_url, headers=headers, timeout=10)

        if response.status_code == 200:
            if 'This folder doesn\'t exist' in response.text:
                return False, "–ü–∞–ø–∫–∞ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –∏–ª–∏ –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞"
            return True, "–î–æ—Å—Ç—É–ø –∫ –ø–∞–ø–∫–µ –µ—Å—Ç—å"
        elif response.status_code == 403:
            return False, "–ù–µ—Ç –ø—Ä–∞–≤ –¥–æ—Å—Ç—É–ø–∞ –∫ –ø–∞–ø–∫–µ"
        elif response.status_code == 404:
            return False, "–ü–∞–ø–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞"
        else:
            return False, f"HTTP –æ—à–∏–±–∫–∞: {response.status_code}"

    except Exception as e:
        return False, f"–û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è: {str(e)}"


def get_direct_download_url(file_id):
    """–°–æ–∑–¥–∞–µ—Ç –ø—Ä—è–º—É—é —Å—Å—ã–ª–∫—É –¥–ª—è —Å–∫–∞—á–∏–≤–∞–Ω–∏—è —Ñ–∞–π–ª–∞"""
    if not file_id:
        return None
    return f"https://drive.google.com/uc?export=download&id={file_id}"


def get_preview_url(file_id):
    """–°–æ–∑–¥–∞–µ—Ç —Å—Å—ã–ª–∫—É –¥–ª—è –ø—Ä–µ–¥–≤–∞—Ä–∏—Ç–µ–ª—å–Ω–æ–≥–æ –ø—Ä–æ—Å–º–æ—Ç—Ä–∞"""
    if not file_id:
        return None
    return f"https://drive.google.com/file/d/{file_id}/preview"


@st.cache_data(ttl=300)  # –ö—ç—à–∏—Ä—É–µ–º –Ω–∞ 5 –º–∏–Ω—É—Ç
def cached_get_files_from_folder(folder_url):
    """–ö—ç—à–∏—Ä–æ–≤–∞–Ω–Ω–∞—è –≤–µ—Ä—Å–∏—è –ø–æ–ª—É—á–µ–Ω–∏—è —Ñ–∞–π–ª–æ–≤"""
    return get_files_from_public_folder(folder_url)


def format_file_info(files_data):
    """–§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ñ–∞–π–ª–∞—Ö –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è"""

    if not files_data:
        return "–§–∞–π–ª—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã"

    info_lines = []
    info_lines.append(f"üìÅ –ù–∞–π–¥–µ–Ω–æ —Ñ–∞–π–ª–æ–≤: {len(files_data)}")
    info_lines.append("")

    for i, file_info in enumerate(files_data[:10], 1):  # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–µ—Ä–≤—ã–µ 10
        filename = file_info['filename']
        status = "‚úÖ" if file_info.get('file_id') else "‚ùì"
        info_lines.append(f"{i}. {status} {filename}")

    if len(files_data) > 10:
        info_lines.append(f"... –∏ –µ—â–µ {len(files_data) - 10} —Ñ–∞–π–ª–æ–≤")

    return "\n".join(info_lines)


def validate_files_data(files_data):
    """–í–∞–ª–∏–¥–∏—Ä—É–µ—Ç –ø–æ–ª—É—á–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –æ —Ñ–∞–π–ª–∞—Ö"""

    if not files_data:
        return False, "–°–ø–∏—Å–æ–∫ —Ñ–∞–π–ª–æ–≤ –ø—É—Å—Ç"

    if not isinstance(files_data, list):
        return False, "–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞–Ω–Ω—ã—Ö"

    image_files = [f for f in files_data if is_image_file(f.get('filename', ''))]

    if not image_files:
        return False, "–ù–µ –Ω–∞–π–¥–µ–Ω–æ —Ñ–∞–π–ª–æ–≤ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π"

    if len(image_files) < len(files_data) * 0.5:
        return False, "–°–ª–∏—à–∫–æ–º –º–∞–ª–æ —Ñ–∞–π–ª–æ–≤ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π"

    return True, f"–ù–∞–π–¥–µ–Ω–æ {len(image_files)} –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π"