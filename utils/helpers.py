import re
from urllib.parse import urlparse, parse_qs


def extract_folder_name_from_url(url):
    """–ò–∑–≤–ª–µ–∫–∞–µ—Ç –Ω–∞–∑–≤–∞–Ω–∏–µ –ø–∞–ø–∫–∏ –∏–∑ URL Google Drive"""

    if not url:
        return ""

    try:
        # –ü–∞—Ç—Ç–µ—Ä–Ω—ã –¥–ª—è –∏–∑–≤–ª–µ—á–µ–Ω–∏—è –Ω–∞–∑–≤–∞–Ω–∏–π –ø–∞–ø–æ–∫
        patterns = [
            r'/folders/[^/]+/([^/?&]+)',  # –ü–æ—Å–ª–µ ID –ø–∞–ø–∫–∏
            r'folders/([^/]+)/?$',  # –ù–∞–∑–≤–∞–Ω–∏–µ –≤ –∫–æ–Ω—Ü–µ URL
            r'/([^/]+)/?$'  # –ü–æ—Å–ª–µ–¥–Ω–∏–π —Å–µ–≥–º–µ–Ω—Ç –ø—É—Ç–∏
        ]

        for pattern in patterns:
            match = re.search(pattern, url)
            if match:
                folder_name = match.group(1)
                # –î–µ–∫–æ–¥–∏—Ä—É–µ–º URL-–∫–æ–¥–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ —Å–∏–º–≤–æ–ª—ã
                folder_name = folder_name.replace('%20', ' ')
                return folder_name

    except Exception:
        pass

    return ""


def extract_folder_id_from_url(url):
    """–ò–∑–≤–ª–µ–∫–∞–µ—Ç ID –ø–∞–ø–∫–∏ –∏–∑ URL Google Drive"""

    if not url:
        return None

    # –ü–∞—Ç—Ç–µ—Ä–Ω—ã –¥–ª—è —Ä–∞–∑–Ω—ã—Ö —Ñ–æ—Ä–º–∞—Ç–æ–≤ —Å—Å—ã–ª–æ–∫ Google Drive
    patterns = [
        r'/folders/([a-zA-Z0-9-_]+)',  # –°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç
        r'id=([a-zA-Z0-9-_]+)',  # –ü–∞—Ä–∞–º–µ—Ç—Ä –≤ URL
        r'/drive/folders/([a-zA-Z0-9-_]+)',  # –ê–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç
        r'folders/([a-zA-Z0-9-_]+)'  # –ë–µ–∑ —Å–ª–µ—à–∞ –≤ –Ω–∞—á–∞–ª–µ
    ]

    for pattern in patterns:
        match = re.search(pattern, url)
        if match:
            return match.group(1)

    return None


def validate_image_filename(filename):
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ —Ñ–∞–π–ª –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ–º"""

    if not filename:
        return False

    image_extensions = {
        '.jpg', '.jpeg', '.png', '.gif', '.bmp',
        '.webp', '.tiff', '.tif', '.svg'
    }

    return any(filename.lower().endswith(ext) for ext in image_extensions)


def clean_filename(filename):
    """–û—á–∏—â–∞–µ—Ç –Ω–∞–∑–≤–∞–Ω–∏–µ —Ñ–∞–π–ª–∞ –æ—Ç –ª–∏—à–Ω–∏—Ö —Å–∏–º–≤–æ–ª–æ–≤"""

    if not filename:
        return ""

    # –£–¥–∞–ª—è–µ–º –≤–µ–¥—É—â–∏–µ –∏ –∫–æ–Ω–µ—á–Ω—ã–µ –ø—Ä–æ–±–µ–ª—ã
    filename = filename.strip()

    # –£–±–∏—Ä–∞–µ–º –Ω–µ–¥–æ–ø—É—Å—Ç–∏–º—ã–µ —Å–∏–º–≤–æ–ª—ã –¥–ª—è —Ñ–∞–π–ª–æ–≤–æ–π —Å–∏—Å—Ç–µ–º—ã
    invalid_chars = '<>:"/\\|?*'
    for char in invalid_chars:
        filename = filename.replace(char, '_')

    return filename


def format_file_size(size_bytes):
    """–§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç —Ä–∞–∑–º–µ—Ä —Ñ–∞–π–ª–∞ –≤ —á–µ–ª–æ–≤–µ–∫–æ—á–∏—Ç–∞–µ–º—ã–π –≤–∏–¥"""

    if size_bytes == 0:
        return "0 B"

    size_names = ["B", "KB", "MB", "GB", "TB"]
    i = 0

    while size_bytes >= 1024 and i < len(size_names) - 1:
        size_bytes /= 1024
        i += 1

    return f"{size_bytes:.1f} {size_names[i]}"


def validate_google_drive_url(url):
    """–í–∞–ª–∏–¥–∏—Ä—É–µ—Ç URL Google Drive"""

    if not url:
        return False, "URL –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º"

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ–º–µ–Ω
    if 'drive.google.com' not in url:
        return False, "URL –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —Å drive.google.com"

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ folders
    if '/folders/' not in url:
        return False, "URL –¥–æ–ª–∂–µ–Ω —Å–æ–¥–µ—Ä–∂–∞—Ç—å '/folders/'"

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º ID –ø–∞–ø–∫–∏
    folder_id = extract_folder_id_from_url(url)
    if not folder_id:
        return False, "–ù–µ —É–¥–∞–ª–æ—Å—å –∏–∑–≤–ª–µ—á—å ID –ø–∞–ø–∫–∏"

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–ª–∏–Ω—É ID (–æ–±—ã—á–Ω–æ 28-44 —Å–∏–º–≤–æ–ª–∞)
    if len(folder_id) < 20:
        return False, "ID –ø–∞–ø–∫–∏ —Å–ª–∏—à–∫–æ–º –∫–æ—Ä–æ—Ç–∫–∏–π"

    return True, "URL –≤–∞–ª–∏–¥–µ–Ω"


def create_direct_image_url(file_id):
    """–°–æ–∑–¥–∞–µ—Ç –ø—Ä—è–º—É—é —Å—Å—ã–ª–∫—É –Ω–∞ –ø—Ä–æ—Å–º–æ—Ç—Ä –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è"""

    if not file_id:
        return None

    return f"https://drive.google.com/file/d/{file_id}/preview"


def parse_file_list(text):
    """–ü–∞—Ä—Å–∏—Ç —Ç–µ–∫—Å—Ç —Å–æ —Å–ø–∏—Å–∫–æ–º —Ñ–∞–π–ª–æ–≤"""

    if not text:
        return []

    # –†–∞–∑–±–∏–≤–∞–µ–º –ø–æ —Å—Ç—Ä–æ–∫–∞–º
    lines = text.strip().split('\n')

    files = []
    for line in lines:
        # –û—á–∏—â–∞–µ–º —Å—Ç—Ä–æ–∫—É
        filename = line.strip()

        # –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –ø—É—Å—Ç—ã–µ —Å—Ç—Ä–æ–∫–∏
        if not filename:
            continue

        # –û—á–∏—â–∞–µ–º –æ—Ç –ª–∏—à–Ω–∏—Ö —Å–∏–º–≤–æ–ª–æ–≤
        filename = clean_filename(filename)

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —ç—Ç–æ —Ñ–∞–π–ª –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
        if validate_image_filename(filename):
            files.append(filename)

    return files


def get_category_color(category):
    """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Ü–≤–µ—Ç –¥–ª—è –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –æ–¥–µ–∂–¥—ã"""

    colors = {
        '–≤–µ—Ä—Ö': '#FF6B6B',  # –ö—Ä–∞—Å–Ω—ã–π
        '–Ω–∏–∑': '#4ECDC4',  # –ë–∏—Ä—é–∑–æ–≤—ã–π
        '–æ–±—É–≤—å': '#45B7D1',  # –°–∏–Ω–∏–π
        '–≥–æ–ª–æ–≤–∞': '#96CEB4',  # –ó–µ–ª–µ–Ω—ã–π
        '–∞–∫—Å–µ—Å—Å—É–∞—Ä': '#FFEAA7'  # –ñ–µ–ª—Ç—ã–π
    }

    return colors.get(category, '#BDC3C7')  # –°–µ—Ä—ã–π –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é


def get_gender_emoji(gender):
    """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —ç–º–æ–¥–∑–∏ –¥–ª—è –ø–æ–ª–∞"""

    if gender == '–ú':
        return 'üë®'
    elif gender == '–ñ':
        return 'üë©'
    elif gender == '–ú/–ñ':
        return 'üë´'
    else:
        return '‚ùì'


def format_annotation_summary(annotation):
    """–§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç –∫—Ä–∞—Ç–∫–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ —Ä–∞–∑–º–µ—Ç–∫–∏"""

    validity_emoji = '‚úÖ' if annotation['validity'] == '–í–∞–ª–∏–¥–Ω–æ' else '‚ùå'
    gender_emoji = get_gender_emoji(annotation['gender'])

    return f"{validity_emoji} {gender_emoji} {annotation['category']}"


def generate_filename_suggestions(folder_name, count=10):
    """–ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è –Ω–∞–∑–≤–∞–Ω–∏–π —Ñ–∞–π–ª–æ–≤"""

    suggestions = []

    # –ë–∞–∑–æ–≤—ã–µ –ø–∞—Ç—Ç–µ—Ä–Ω—ã
    base_patterns = [
        f"{folder_name}_",
        "img_",
        "photo_",
        "image_",
        ""
    ]

    # –†–∞—Å—à–∏—Ä–µ–Ω–∏—è
    extensions = ['.jpg', '.jpeg', '.png']

    for i in range(1, count + 1):
        for pattern in base_patterns:
            for ext in extensions:
                suggestions.append(f"{pattern}{i:03d}{ext}")

    return suggestions[:count]


def sanitize_folder_name(name):
    """–û—á–∏—â–∞–µ—Ç –Ω–∞–∑–≤–∞–Ω–∏–µ –ø–∞–ø–∫–∏ –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –≤ –ø—É—Ç—è—Ö"""

    if not name:
        return "unknown"

    # –ü—Ä–∏–≤–æ–¥–∏–º –∫ –Ω–∏–∂–Ω–µ–º—É —Ä–µ–≥–∏—Å—Ç—Ä—É
    name = name.lower().strip()

    # –ó–∞–º–µ–Ω—è–µ–º –ø—Ä–æ–±–µ–ª—ã –Ω–∞ –ø–æ–¥—á–µ—Ä–∫–∏–≤–∞–Ω–∏—è
    name = re.sub(r'\s+', '_', name)

    # –£–±–∏—Ä–∞–µ–º –Ω–µ–¥–æ–ø—É—Å—Ç–∏–º—ã–µ —Å–∏–º–≤–æ–ª—ã
    name = re.sub(r'[^\w\-_]', '', name)

    # –£–±–∏—Ä–∞–µ–º –º–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã–µ –ø–æ–¥—á–µ—Ä–∫–∏–≤–∞–Ω–∏—è
    name = re.sub(r'_+', '_', name)

    # –£–±–∏—Ä–∞–µ–º –ø–æ–¥—á–µ—Ä–∫–∏–≤–∞–Ω–∏—è –≤ –Ω–∞—á–∞–ª–µ –∏ –∫–æ–Ω—Ü–µ
    name = name.strip('_')

    return name or "unknown"


def validate_annotation_data(data):
    """–í–∞–ª–∏–¥–∏—Ä—É–µ—Ç –¥–∞–Ω–Ω—ã–µ —Ä–∞–∑–º–µ—Ç–∫–∏"""

    errors = []

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –ø–æ–ª—è
    required_fields = ['validity', 'gender', 'category']

    for field in required_fields:
        if field not in data or not data[field]:
            errors.append(f"–ü–æ–ª–µ '{field}' –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ")

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤–∞–ª–∏–¥–Ω–æ—Å—Ç—å –∑–Ω–∞—á–µ–Ω–∏–π
    if 'validity' in data:
        if data['validity'] not in ['–í–∞–ª–∏–¥–Ω–æ', '–ù–µ–≤–∞–ª–∏–¥–Ω–æ']:
            errors.append("–í–∞–ª–∏–¥–Ω–æ—Å—Ç—å –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å '–í–∞–ª–∏–¥–Ω–æ' –∏–ª–∏ '–ù–µ–≤–∞–ª–∏–¥–Ω–æ'")

    if 'gender' in data:
        valid_genders = ['–ú', '–ñ', '–ú/–ñ']
        if data['gender'] not in valid_genders:
            errors.append(f"–ü–æ–ª –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –æ–¥–Ω–∏–º –∏–∑: {valid_genders}")

    if 'category' in data:
        valid_categories = ['–≤–µ—Ä—Ö', '–Ω–∏–∑', '–æ–±—É–≤—å', '–≥–æ–ª–æ–≤–∞', '–∞–∫—Å–µ—Å—Å—É–∞—Ä']
        if data['category'] not in valid_categories:
            errors.append(f"–ö–∞—Ç–µ–≥–æ—Ä–∏—è –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –æ–¥–Ω–æ–π –∏–∑: {valid_categories}")

    return len(errors) == 0, errors